/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schedulers;

import entity.Customer;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import javax.ejb.EJBException;
import javax.ejb.Stateless;
import javax.ejb.LocalBean;
import javax.ejb.Schedule;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import util.SMTPAuthenticator;

/**
 *
 * @author MY ASUS
 */
@Stateless
@LocalBean
public class OpCrmTimerBean {

    @Schedule(second = "0", minute = "0", hour = "0", dayOfMonth = "1", month = "1")//second="0", minute="0", dayOfWeek="Mon")
    private void autoResetAllRedemption() {
        System.err.println("function: autoResetAllRedemption() ");
        List<Customer> cust = new ArrayList<Customer>();
        cust = getCustomer();

        if (!cust.isEmpty()) {
            for (Customer c : cust) {
                System.err.println("function: iterate customer: " + c.getId());
                c.setRedeemedCake(false);
                if (!persistCustomer(c)) {
                    System.err.println("customer not persisted!");
                }
            }
        } else {
            System.out.println("No customer found");
        }
    }

    @Schedule(second = "0", minute = "0", hour = "0", dayOfMonth = "1") // comment this out and uncomment the next line to test
    //@Schedule(second="*/30", minute="*", hour="*") // for testing -> timer will be triggered every 30 seconds
    private void autoSendMonthlyEmail() {
        System.err.println("function: autoSendMonthlyEmail() ");

        String emailServerName = "mailauth.comp.nus.edu.sg";
        // Replace with your real name and unix email address
        String emailFromAddress = "Island Furniture System Administrator <a0101309@u.nus.edu>";
        // Replace with your real name and NUSNET email address
        String mailer = "JavaMailer";

        List<Customer> cust = new ArrayList<Customer>();
        cust = getCustomers();

        if (!cust.isEmpty()) {
            for (Customer c : cust) {
                System.err.println("function: iterate customer: " + c.getId());

                String toEmailAddress = c.getEmail();

                try {
                    Properties props = new Properties();
                    props.put("mail.transport.protocol", "smtp");
                    props.put("mail.smtp.host", emailServerName);
                    props.put("mail.smtp.port", "25");
                    props.put("mail.smtp.auth", "true");
                    props.put("mail.smtp.starttls.enable", "true");
                    props.put("mail.smtp.debug", "true");
                    javax.mail.Authenticator auth = new SMTPAuthenticator();
                    Session session = Session.getInstance(props, auth);
                    session.setDebug(true);
                    Message msg = new MimeMessage(session);
                    if (msg != null) {
                        msg.setFrom(InternetAddress.parse(emailFromAddress, false)[0]);
                        msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmailAddress, false));
                        msg.setSubject("Promotions in Island Furniture!" + "\n\n");

                        //Create and fill first part
                        MimeBodyPart header = new MimeBodyPart();
                        header.setText("Dear " + c.getName() + " , here are the promotions in Island Furniture.\n\n");

                        //Create and fill second part
                        MimeBodyPart body = new MimeBodyPart();
                        body.setText("Blah Blah Blah.\n\n"); // can insert campaign stuff here

                        //Create and fill third part
                        MimeBodyPart linkText = new MimeBodyPart();
                        linkText.setText("Come visit our store today.");

                        //Create the Multipart
                        Multipart mp = new MimeMultipart();
                        mp.addBodyPart(header);
                        mp.addBodyPart(body);
                        mp.addBodyPart(linkText);

                        //Set Message Content
                        msg.setContent(mp);

                        //String messageText = "Welcome to Island Furniture Family, " +name+ ".\n\n Here's the autogenerated password: " + password +"\n\n";
                        //msg.setText(messageText);
                        //msg.setDisposition(Part.INLINE);
                        msg.setHeader("X-Mailer", mailer);
                        Date timeStamp = new Date();
                        msg.setSentDate(timeStamp);
                        Transport.send(msg);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    throw new EJBException(e.getMessage());
                }
            }
        }
    }

    private List<Customer> getCustomer() {
        EntityManagerFactory emf = javax.persistence.Persistence.createEntityManagerFactory("IslandSystem-ejbPU");
        EntityManager em = emf.createEntityManager();
        Query query = em.createQuery("SELECT c FROM " + Customer.class.getName() + " c WHERE c.redeemedCake = '1'");
        return query.getResultList();
    }

        private List<Customer> getCustomers() {
        EntityManagerFactory emf = javax.persistence.Persistence.createEntityManagerFactory("IslandSystem-ejbPU");
        EntityManager em = emf.createEntityManager();
        Query query = em.createQuery("SELECT c FROM " + Customer.class.getName() + " c WHERE c.unsubscribed = '0'");
        return query.getResultList();
    }
        
    private boolean persistCustomer(Customer c) {
        EntityManagerFactory emf = javax.persistence.Persistence.createEntityManagerFactory("IslandSystem-ejbPU");
        EntityManager em = emf.createEntityManager();
        try {
            em.merge(c);
            em.flush();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            em.close();
            System.err.println("customer persisted!");
            return true;
        }
    }
}
